name: Build & Push to Dockerhub

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.5-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: blackbook_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.1'
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3
        npm install

    - name: Set up database
      run: |
        bundle exec rails db:create
        bundle exec rails db:schema:load
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:test_pass@localhost:5432/blackbook_test

    - name: Run RSpec tests
      run: bundle exec rspec
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:test_pass@localhost:5432/blackbook_test

    - name: Run RuboCop
      run: bundle exec rubocop

  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build & Push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: devleo/blackbook:latest
      -
        name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}
